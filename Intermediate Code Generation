#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

char s[100], post[100], stack[100], queue[100];
int top = -1, j = 0;

int precedence(char c) {
    if (c == '+' || c == '-') return 1;
    else if (c == '*' || c == '/') return 2;
    else if (c == '^') return 3;
    else return 0;
}


void postfix() {
    int i = 0;
    j = 0;
    top = -1;
    while (s[i] != '\0') {
        if (s[i] == '(') {
            stack[++top] = s[i];
        } else if (isalpha(s[i]) || isdigit(s[i])) {
            post[j++] = s[i];
        } else if (precedence(s[i])) {
            while (top != -1 && precedence(stack[top]) >= precedence(s[i])) {
                post[j++] = stack[top--];
            }
            stack[++top] = s[i];
        } else if (s[i] == ')') {
            while (top != -1 && stack[top] != '(') {
                post[j++] = stack[top--];
            }
            if (top != -1) top--; 
        }
        i++;
    }
    
    while (top != -1) {
        post[j++] = stack[top--];
    }
    post[j] = '\0';
}

int main() {
    char ind = '1';
    FILE *fp, *fp1, *fp2, *fp3;

    fp = fopen("3addr.txt", "w");
    fp1 = fopen("quadraple.txt", "w");
    fp2 = fopen("triple.txt", "w");
    fp3 = fopen("input.txt", "r");

    if (!fp || !fp1 || !fp2 || !fp3) {
        printf("Error opening file.\n");
        return 1;
    }

    fprintf(fp, "Three Address Code:\n");
    fprintf(fp1, "Quadruple\nOP\tO1\tO2\tRES\n");
    fprintf(fp2, "Triple\nIN\tOP\tO1\tO2\n");

    while (fscanf(fp3, "%s", s) != EOF) {
        postfix();

        printf("Infix : %s\nPostfix : %s\n", s, post);


        int i = 0, front = -1;


        while (post[i] != '\0') {
            if (precedence(post[i])) {
                char a = queue[front--];
                char b = queue[front--];

                fprintf(fp, "t%c = %c %c %c\n", ind, b, post[i], a);
                fprintf(fp1, "%c\t%c\t%c\tt%c\n", post[i], b, a, ind);
                fprintf(fp2, "%c\t%c\t%c\t%c\n", ind, post[i], b, a);

                queue[++front] = ind++;
            } else {
                queue[++front] = post[i];
            }
            i++;
        }
    }

    fclose(fp);
    fclose(fp1);
    fclose(fp2);
    fclose(fp3);

    return 0;
}
