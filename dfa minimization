#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STATES 100
#define MAX_SYMBOLS 10

int num_states, num_symbols;
char symbols[MAX_SYMBOLS];
int transitions[MAX_STATES][MAX_SYMBOLS];
int final_states[MAX_STATES];
int is_final[MAX_STATES];
int new_state_map[MAX_STATES];
int marked[MAX_STATES][MAX_STATES];

void input_dfa() {
    printf("Enter number of states: ");
    scanf("%d", &num_states);

    printf("Enter number of input symbols: ");
    scanf("%d", &num_symbols);

    printf("Enter input symbols: ");
    scanf("%s", symbols);

    printf("\nEnter transition table (use 0 for no transition):\n");
    printf("Example format:\nState a b\n0 2 3\n1 2 1\n\n");

    for (int i = 0; i < num_states; i++) {
        printf("State %d: ", i);
        for (int j = 0; j < num_symbols; j++) {
            scanf("%d", &transitions[i][j]);
            // Adjust for 1-based input (0 means no transition)
            if (transitions[i][j] > 0)
                transitions[i][j]--;  // convert to 0-based index
            else
                transitions[i][j] = -1;  // mark as no transition
        }
    }

    int num_finals;
    printf("Enter number of final states: ");
    scanf("%d", &num_finals);

    printf("Enter final states (space-separated, 0-based indices): ");
    for (int i = 0; i < num_finals; i++) {
        int f;
        scanf("%d", &f);
        final_states[i] = f;
        is_final[f] = 1;
    }
}

void initialize_marked_table() {
    for (int i = 0; i < num_states; i++)
        for (int j = 0; j < num_states; j++)
            marked[i][j] = 0;

    // Mark pairs (p, q) where one is final and the other is not
    for (int i = 0; i < num_states; i++) {
        for (int j = 0; j < i; j++) {
            if (is_final[i] != is_final[j]) {
                marked[i][j] = 1;
            }
        }
    }
}

void minimize_dfa() {
    int changed;
    do {
        changed = 0;
        for (int i = 0; i < num_states; i++) {
            for (int j = 0; j < i; j++) {
                if (!marked[i][j]) {
                    for (int k = 0; k < num_symbols; k++) {
                        int p = transitions[i][k];
                        int q = transitions[j][k];
                        if (p == -1 || q == -1) continue;
                        if (p == q) continue;
                        if (p > q) {
                            int tmp = p;
                            p = q;
                            q = tmp;
                        }
                        if (marked[q][p]) {
                            marked[i][j] = 1;
                            changed = 1;
                            break;
                        }
                    }
                }
            }
        }
    } while (changed);
}

void build_new_states() {
    for (int i = 0; i < num_states; i++) {
        new_state_map[i] = -1;
    }

    int new_count = 0;
    for (int i = 0; i < num_states; i++) {
        if (new_state_map[i] == -1) {
            new_state_map[i] = new_count;
            for (int j = i + 1; j < num_states; j++) {
                int a = i > j ? i : j;
                int b = i > j ? j : i;
                if (!marked[a][b]) {
                    new_state_map[j] = new_count;
                }
            }
            new_count++;
        }
    }

    printf("\nMinimized DFA has %d states.\n", new_count);
    printf("State mapping:\n");
    for (int i = 0; i < num_states; i++) {
        printf("%d -> %c\n", i, 'A' + new_state_map[i]);
    }

    printf("\nMinimized DFA Transition Table:\n");
    printf("State\t");
    for (int s = 0; s < num_symbols; s++) {
        printf("%c\t", symbols[s]);
    }
    printf("\n");

    int printed[new_count];
    memset(printed, 0, sizeof(printed));

    for (int i = 0; i < num_states; i++) {
        int ni = new_state_map[i];
        if (printed[ni]) continue;
        printed[ni] = 1;
        printf("%c\t", 'A' + ni);
        for (int s = 0; s < num_symbols; s++) {
            int t = transitions[i][s];
            if (t == -1)
                printf("0\t");
            else
                printf("%c\t", 'A' + new_state_map[t]);
        }
        printf("\n");
    }
}

int main() {
    input_dfa();
    initialize_marked_table();
    minimize_dfa();
    build_new_states();
    return 0;
}


/*Enter number of states: 5
Enter number of input symbols: 2
Enter input symbols: ab

Enter transition table (use 0 for no transition):
State 0: 2 3
State 1: 2 1
State 2: 2 3
State 3: 2 5
State 4: 2 3

Enter number of final states: 1
Enter final states: 4
*/
