


                                     	   LEXICAL ANALYSER


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 2000

char lexemes[MAX][50];
char tokens[MAX][20]; 
int lines[MAX];
int entryCount = 0;
int lastKeywordLine = 0;

void loadTable() {
    FILE *fp = fopen("sample_table.txt", "r");
    if (!fp) {
        printf("Could not open sample_table.txt\n");
        exit(1);
    }

    char line[100];
    fgets(line, sizeof(line), fp); 

    while (fgets(line, sizeof(line), fp)) {
        if (entryCount >= MAX) {
            printf("Warning: Maximum table entries reached. Some entries may be ignored.\n");
            break;
        }
        sscanf(line, "%s %s %d", lexemes[entryCount], tokens[entryCount], &lines[entryCount]);
        if (strcmp(tokens[entryCount], "keyword") == 0) {
            if (lines[entryCount] > lastKeywordLine)
                lastKeywordLine = lines[entryCount];
        }
        entryCount++;
    }

    fclose(fp);
}

int findInTable(char *word, const char *type) {
    for (int i = 0; i < entryCount; i++) {
        if (strcmp(lexemes[i], word) == 0 && strcmp(tokens[i], type) == 0)
            return lines[i];
    }
    return -1;
}

void appendToTable(char *word, const char *type) {
    if (findInTable(word, type) == -1) { 
        if (entryCount >= MAX) {
            printf("Error: Symbol table full. Cannot add more entries.\n");
            return;
        }
        
        int newLine = entryCount > 0 ? lines[entryCount - 1] + 1 : 1;
        FILE *fp = fopen("sample_table.txt", "a");
        if (!fp) {
            printf("Error: Could not open sample_table.txt for appending.\n");
            return;
        }
        fprintf(fp, "%s\t%s\t%d\n", word, type, newLine);
        fclose(fp);

        strcpy(lexemes[entryCount], word);
        strcpy(tokens[entryCount], type);
        lines[entryCount] = newLine;
        entryCount++;
    }
}



int main() {
    char filename[100];

    printf("Enter file name: ");
    scanf("%99s", filename); 

    FILE *fp = fopen(filename, "r");
    if (!fp) {
        printf("Cannot open %s\n", filename);
        return 1;
    }
    

    loadTable();

    char ch, buffer[50];
    int i = 0, line = 1, skipString = 0;

    printf("Lexeme\t\tToken\n");

    while ((ch = fgetc(fp)) != EOF) {
        if (ch == '\n') line++;

        if (ch == '\"') {
            skipString = !skipString;
            continue;
        }

        if (skipString) continue;

        if (ch == '+') {
            printf("%c\t\tArithmetic Operator is PLUS\n", ch);
            continue;
        } else if (ch == '-') {
            printf("%c\t\tArithmetic Operator is MINUS\n", ch);
            continue;
        } else if (ch == '*') {
            printf("%c\t\tArithmetic Operator is MUL\n", ch);
            continue;
        } else if (ch == '/') {
            printf("%c\t\tArithmetic Operator is DIV\n", ch);
            continue;
        } else if (ch == '%') {
            printf("%c\t\tArithmetic Operator is MOD\n", ch);
            continue;
        }

        if (isalnum(ch)) {
            buffer[i++] = ch;
            ch = fgetc(fp);
            while (isalnum(ch)) {
                buffer[i++] = ch;
                ch = fgetc(fp);
            }
            buffer[i] = '\0';
            fseek(fp, -1, SEEK_CUR);

            if (strcmp(buffer, "main") == 0) {
                i = 0;
                continue;
            }

            if (isdigit(buffer[0])) {
                appendToTable(buffer, "number");
                int ln = findInTable(buffer, "number");
                printf("%s\t\tnumber\t%d\n", buffer, ln);
            } else if (findInTable(buffer, "keyword") != -1) {
                printf("%s\t\tkeyword\t\n", buffer);
            } else {
                appendToTable(buffer, "identifier");
                int tableLine = findInTable(buffer, "identifier");
                printf("%s\t\tidentifier\t%d\n", buffer, tableLine);
            }
            i = 0;
        } else if (ch == '=') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf("==\t\tRelop EQ\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf("=\t\tAssign OP\n");
            }
        } else if (ch == '<') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf("<=\t\tRelop LE\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf("<\t\tRelop LT\n");
            }
        } else if (ch == '>') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf(">=\t\tRelop GE\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf(">\t\tRelop GT\n");
            }
        } else if (ch == ';') {

        }
    }

    fclose(fp);
    return 0;
}




INPUT.TXT

int main() {
    int x= 10;
    float y = 20;
    x=x+y;
    if (x> y) {
        x = y - 10;
    }
}

SYMBOL TABLE

Lexeme       Token       Line

int          keyword     1
float        keyword     2
char         keyword     3
if           keyword     4
else         keyword     5
while        keyword     6
for          keyword     7
return       keyword     8
void         keyword     9
break        keyword     10
continue     keyword     11
double       keyword     12
do           keyword     13
switch       keyword     14
case         keyword     15
default      keyword     16
sizeof       keyword     17
static       keyword     18
struct       keyword     19
typedef      keyword     20
union        keyword     21
enum         keyword     22
const        keyword     23
volatile     keyword     24
extern       keyword     25
register     keyword     26
goto         keyword     27
signed       keyword     28
unsigned     keyword     29
long         keyword     30
include      keyword     33
define       keyword     34

x          identifier  1
10           number      2
y           identifier  3
20           number      4
5            number      5


OUTPUT

Enter file name: input.txt
Lexeme		Token
int		keyword	
int		keyword	
x		identifier	1
=		Assign OP
10		number	2
float		keyword	
y		identifier	3
=		Assign OP
20		number	4
x		identifier	1
=		Assign OP
x		identifier	1
+		Arithmetic Operator is PLUS
y		identifier	3
if		keyword	
x		identifier	1
>		Relop GT
y		identifier	3
x		identifier	1
=		Assign OP
y		identifier	1
-		Arithmetic Operator is PLUS
10		number	5





