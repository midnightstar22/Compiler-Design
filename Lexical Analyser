#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX 2000

char lexemes[MAX][50];
char tokens[MAX][20];  // Increased size to accommodate longer token names
int lines[MAX];
int entryCount = 0;
int lastKeywordLine = 0;

void loadTable() {
    FILE *fp = fopen("sample_table.txt", "r");
    if (!fp) {
        printf("Could not open sample_table.txt\n");
        exit(1);
    }

    char line[100];
    fgets(line, sizeof(line), fp); // Skip header

    while (fgets(line, sizeof(line), fp)) {
        if (entryCount >= MAX) {
            printf("Warning: Maximum table entries reached. Some entries may be ignored.\n");
            break;
        }
        sscanf(line, "%s %s %d", lexemes[entryCount], tokens[entryCount], &lines[entryCount]);
        if (strcmp(tokens[entryCount], "keyword") == 0) {
            if (lines[entryCount] > lastKeywordLine)
                lastKeywordLine = lines[entryCount];
        }
        entryCount++;
    }

    fclose(fp);
}

int findInTable(char *word, const char *type) {
    for (int i = 0; i < entryCount; i++) {
        if (strcmp(lexemes[i], word) == 0 && strcmp(tokens[i], type) == 0)
            return lines[i];
    }
    return -1;
}

void appendToTable(char *word, const char *type) {
    if (findInTable(word, type) == -1) {  // Only if it's not already in the table
        if (entryCount >= MAX) {
            printf("Error: Symbol table full. Cannot add more entries.\n");
            return;
        }
        
        int newLine = entryCount > 0 ? lines[entryCount - 1] + 1 : 1;
        FILE *fp = fopen("sample_table.txt", "a");
        if (!fp) {
            printf("Error: Could not open sample_table.txt for appending.\n");
            return;
        }
        fprintf(fp, "%s\t%s\t%d\n", word, type, newLine);
        fclose(fp);

        strcpy(lexemes[entryCount], word);
        strcpy(tokens[entryCount], type);
        lines[entryCount] = newLine;
        entryCount++;
    }
}


int main() {
    FILE *fp = fopen("input.txt", "r");
    if (!fp) {
        printf("Cannot open input.txt\n");
        return 1;
    }

    loadTable();

    char ch, buffer[50];
    int i = 0, line = 1, skipString = 0;

    printf("Lexeme\t\tToken\n");

    while ((ch = fgetc(fp)) != EOF) {
        if (ch == '\n') line++;

        if (ch == '\"') {
            skipString = !skipString;
            continue;
        }

        if (skipString) continue;

        if (ch == '+') {
            printf("%c\t\tArithmetic Operator is PLUS\n", ch);
            continue;
        } else if (ch == '-') {
            printf("%c\t\tArithmetic Operator is MINUS\n", ch);
            continue;
        } else if (ch == '*') {
            printf("%c\t\tArithmetic Operator is MUL\n", ch);
            continue;
        } else if (ch == '/') {
            printf("%c\t\tArithmetic Operator is DIV\n", ch);
            continue;
        } else if (ch == '%') {
            printf("%c\t\tArithmetic Operator is MOD\n", ch);
            continue;
        }

        if (isalnum(ch)) {
            buffer[i++] = ch;
            ch = fgetc(fp);
            while (isalnum(ch)) {
                buffer[i++] = ch;
                ch = fgetc(fp);
            }
            buffer[i] = '\0';
            fseek(fp, -1, SEEK_CUR);

            if (strcmp(buffer, "main") == 0) {
                i = 0;
                continue;
            }

            if (isdigit(buffer[0])) {
                appendToTable(buffer, "number");
                int ln = findInTable(buffer, "number");
                printf("%s\t\tnumber\t%d\n", buffer, ln);
            } else if (findInTable(buffer, "keyword") != -1) {
                printf("%s\t\tkeyword\t%d\n", buffer, findInTable(buffer, "keyword"));
            } else {
                appendToTable(buffer, "identifier");
                int tableLine = findInTable(buffer, "identifier");
                printf("%s\t\tidentifier\t%d\n", buffer, tableLine);
            }
            i = 0;
        } else if (ch == '=') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf("==\t\tRelop EQ\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf("=\t\tAssign OP\n");
            }
        } else if (ch == '<') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf("<=\t\tRelop LE\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf("<\t\tRelop LT\n");
            }
        } else if (ch == '>') {
            ch = fgetc(fp);
            if (ch == '=') {
                printf(">=\t\tRelop GE\n");
            } else {
                fseek(fp, -1, SEEK_CUR);
                printf(">\t\tRelop GT\n");
            }
        } else if (ch == ';') {
            // Do nothing or handle semicolon if needed
        }
    }

    fclose(fp);
    return 0;
}




input.txt
int main() {
    int a = 10;
    float b = 20;
    a = a + b;
    if (a > b) {
        a = a - 5;
    }
}


sample_table.txt

lexeme     token      line
int        keyword    1
float      keyword    2
char       keyword    3
if         keyword    4
else       keyword    5
while      keyword    6
return     keyword    7
for        keyword    8

